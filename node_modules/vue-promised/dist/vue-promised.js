/**
 * vue-promised v1.2.2
 * (c) 2020 Eduardo San Martin Morote <posva13@gmail.com>
 * @license MIT
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.VuePromised = {})));
}(this, (function (exports) { 'use strict';

function assert (condition, message) {
  if ("development" !== 'production' && !condition) {
    // useful when testing
    // console.warn(`[vue-promised] ${message}`)
    throw new Error(("[vue-promised] " + message))
  }
}

var Promised = {
  props: {
    tag: {
      type: String,
      default: 'span',
    },
    promise: {
      // allow polyfied Promise
      validator: function (p) { return p && typeof p.then === 'function' && typeof p.catch === 'function'; },
    },
    pendingDelay: {
      type: [Number, String],
      default: 200,
    },
  },

  data: function () { return ({
    resolved: false,
    data: null,
    error: null,

    isDelayElapsed: false,
  }); },

  render: function render (h) {
    if (this.$scopedSlots.combined) {
      var node = this.$scopedSlots.combined({
        isPending: !this.resolved,
        isDelayOver: this.isDelayElapsed,
        data: this.data,
        error: this.error,
      });
      assert(
        (Array.isArray(node) && node.length) || node,
        'Provided scoped slot "combined" cannot be empty'
      );
      return Array.isArray(node) ? convertVNodeArray(h, this.tag, node) : node
    }

    if (this.error) {
      return getSlotVNode(this, h, 'rejected', this.error)
    }

    if (this.resolved) {
      return getSlotVNode(this, h, 'default', this.data)
    }

    if (!this.isDelayElapsed) { return h() }

    return getSlotVNode(this, h, 'pending', this.data)
  },

  watch: {
    promise: {
      handler: function handler (promise) {
        var this$1 = this;

        this.resolved = false;
        this.error = null;
        if (!promise) {
          this.data = null;
          this.isDelayElapsed = false;
          if (this.timerId) { clearTimeout(this.timerId); }
          this.timerId = null;
          return
        }
        this.setupDelay();
        promise
          .then(function (data) {
            // ensure we are dealing with the same promise
            if (this$1.promise === promise) {
              this$1.data = data;
              this$1.resolved = true;
            }
          })
          .catch(function (err) {
            // ensure we are dealing with the same promise
            if (this$1.promise === promise) {
              this$1.error = err;
              this$1.resolved = true;
            }
          });
      },
      immediate: true,
    },
  },

  methods: {
    setupDelay: function setupDelay () {
      var this$1 = this;

      if (this.pendingDelay > 0) {
        this.isDelayElapsed = false;
        if (this.timerId) { clearTimeout(this.timerId); }
        this.timerId = setTimeout(
          function () { return (this$1.isDelayElapsed = true); },
          this.pendingDelay
        );
      } else {
        this.isDelayElapsed = true;
      }
    },
  },
};

function convertVNodeArray (h, wrapperTag, nodes) {
  // for arrays and single text nodes
  if (nodes.length > 1 || !nodes[0].tag) { return h(wrapperTag, {}, nodes) }
  return nodes[0]
}

function getSlotVNode (vm, h, slotName, data) {
  // use scopedSlots if available
  if (vm.$scopedSlots[slotName]) {
    var node = vm.$scopedSlots[slotName](data);
    assert(
      (Array.isArray(node) && node.length) || node,
      ("Provided scoped slot \"" + slotName + "\" is empty")
    );
    return Array.isArray(node) ? convertVNodeArray(h, vm.tag, node) : node
  }

  var slot = vm.$slots[slotName];
  assert(slot, ("No slot \"" + slotName + "\" provided"));
  // 2.5.x compatibility
  assert(slot.length, ("Provided slot \"" + slotName + "\" is empty"));
  return convertVNodeArray(h, vm.tag, slot)
}

exports.Promised = Promised;

Object.defineProperty(exports, '__esModule', { value: true });

})));
